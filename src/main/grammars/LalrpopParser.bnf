{
  parserClass="com.mdrobnak.lalrpop.parser.LalrpopParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lp"
  psiImplClassSuffix="Impl"
  psiPackage="com.mdrobnak.lalrpop.psi"
  psiImplPackage="com.mdrobnak.lalrpop.psi.impl"

  elementTypeHolderClass="com.mdrobnak.lalrpop.psi.LpElementTypes"
  elementTypeClass="com.mdrobnak.lalrpop.psi.LpElementType"
  tokenTypeClass="com.mdrobnak.lalrpop.psi.LpTokenType"

  generateTokenAccessors=true
}

grammar ::= SHEBANG_ATTRIBUTE* use_stmt*
    grammar_decl
    grammar_item*

grammar_decl ::= annotation* GRAMMAR grammar_type_params? grammar_params? grammar_where_clauses? SEMICOLON

private meta comma ::= (<<param>> COMMA)* <<param>>?

private meta plus ::= (<<param>> PLUS)* <<param>>?

grammar_type_params ::= LESSTHAN <<comma type_param>> GREATERTHAN

type_param ::= LIFETIME | id

grammar_where_clauses ::= WHERE <<comma grammar_where_clause>>

grammar_where_clause ::= LIFETIME COLON <<plus LIFETIME>> | forall type_ref COLON type_bounds

forall ::= FOR LESSTHAN <<comma type_param>> GREATERTHAN | ()

type_bounds ::= <<plus type_bound>>

type_bound ::= LIFETIME
    // Function
    | forall path LPAREN <<comma type_ref>> RPAREN (RSINGLEARROW type_ref)?
    // Trait
    | forall path (LESSTHAN <<comma type_bound_param>> GREATERTHAN)?

type_bound_param ::= LIFETIME | type_ref | id EQUALS type_ref

grammar_params ::= LPAREN <<comma grammar_param>> RPAREN

grammar_param ::= id COLON type_ref

private grammar_item ::= use_stmt | match_token | extern_token | nonterminal | COMMENT

use_stmt ::= USE IMPORT_CODE SEMICOLON {
    implements = "com.intellij.psi.PsiLanguageInjectionHost"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpUseStmtMixin"
}

visibility ::= PUB LPAREN path RPAREN | PUB

nonterminal ::= annotation* visibility? nonterminal_name (COLON type_ref)? EQUALS alternatives {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpNonterminalMixin"
}

annotation_arg ::= LPAREN annotation_arg_name EQUALS annotation_arg_value RPAREN

annotation_arg_name ::= id
annotation_arg_value ::= STR_LITERAL

annotation ::= POUND LBRACKET annotation_name annotation_arg? RBRACKET

annotation_name ::= ID

nonterminal_name ::= ID nonterminal_params? {
    implements = "com.mdrobnak.lalrpop.psi.LpNamedElement"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpNonterminalNameMixin"
}

nonterminal_params ::= LESSTHAN <<comma nonterminal_param>> GREATERTHAN

nonterminal_param ::= ID {
    implements = "com.mdrobnak.lalrpop.psi.LpNamedElement"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpNonterminalParamMixin"
}

nonterminal_ref ::= ID {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpNonterminalRefMixin"
}

alternatives ::= alternative SEMICOLON | LBRACE <<comma alternative>> RBRACE SEMICOLON? {
    implements = "com.mdrobnak.lalrpop.psi.LpFoldable"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpAlternativesMixin"
}

alternative ::= annotation* symbol+ (IF cond)? action?
    | (IF cond)? action {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpAlternativeMixin"
}

action ::= action_type CODE {
    implements = ["com.intellij.psi.PsiLanguageInjectionHost" "com.mdrobnak.lalrpop.psi.LpResolveType"]
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpActionMixin"
}

action_type ::= LOOKAHEAD_ACTION | LOOKBEHIND_ACTION | USER_ACTION | FALLIBLE_ACTION

cond ::= ID cond_op STR_LITERAL

cond_op ::= EQUALS_EQUALS | NOT_EQUALS | MATCH_OP | NOT_MATCH_OP

expr_symbol ::= symbol* {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpExprSymbolMixin"
}

symbol ::= LESSTHAN symbol_name? symbol0 GREATERTHAN
    | symbol0 {
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpSymbolMixin"
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
}

symbol_name ::= MUT? ID COLON

symbol0 ::= symbol1 repeat_op* {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpSymbol0Mixin"
}

repeat_op ::= PLUS | MULTIPLY | QUESTION

symbol1 ::= nonterminal_ref nonterminal_arguments?
    | quoted_terminal
    | parentheses_expr_symbol
    | LOOKAHEAD
    | LOOKBEHIND
    | NOT {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpSymbol1Mixin"
}

nonterminal_arguments ::= LESSTHAN <<comma symbol>> GREATERTHAN
parentheses_expr_symbol ::= LPAREN expr_symbol RPAREN {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpParenthesesExprSymbolMixin"
}

type_ref ::= tuple
    | array
    | type_of_symbol
    | rust_reference
    | rust_type
    | dyn_trait
    | dyn_fn {
    implements = ["com.mdrobnak.lalrpop.psi.LpResolveType" "com.intellij.psi.PsiLanguageInjectionHost"]
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpTypeRefMixin"
}

tuple ::= LPAREN <<comma type_ref>> RPAREN {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpTupleMixin"
}
array ::= LBRACKET type_ref RBRACKET {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpArrayMixin"
}
type_of_symbol ::= POUND symbol POUND {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpTypeOfSymbolMixin"
}
rust_reference ::= AND LIFETIME? MUT? type_ref {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpRustReferenceMixin"
}
rust_type ::= path type_generic_arguments? {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpRustTypeMixin"
}
dyn_trait ::= DYN rust_type {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpDynTraitMixin"
}
dyn_fn ::= DYN forall path LPAREN <<comma type_ref>> RPAREN return_type? {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpDynFnMixin"
}
return_type ::= RSINGLEARROW type_ref

type_generic_arguments ::= LESSTHAN <<comma type_ref_or_lifetime>> GREATERTHAN

type_ref_or_lifetime ::= type_ref | LIFETIME

extern_token ::= EXTERN LBRACE associated_type* enum_token associated_type* RBRACE
    | EXTERN LBRACE associated_type* RBRACE {
    implements = "com.mdrobnak.lalrpop.psi.LpFoldable"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpExternTokenMixin"
}

match_token ::= MATCH LBRACE match_contents RBRACE (ELSE LBRACE match_contents RBRACE)* {
    implements = "com.mdrobnak.lalrpop.psi.LpFoldable"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpMatchTokenMixin"
}

match_contents ::= <<comma match_item>>

match_item ::= UNDERSCORE
    | match_symbol (USER_ACTION CODE)?

match_symbol ::= quoted_literal

enum_token ::= ENUM type_ref LBRACE <<comma conversion>> RBRACE {
    implements = "com.mdrobnak.lalrpop.psi.LpFoldable"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpEnumTokenMixin"
}

associated_type ::= TYPE ID EQUALS type_ref SEMICOLON

conversion ::= terminal USER_ACTION CODE

terminal ::= quoted_terminal | ID

quoted_terminal ::= quoted_literal

quoted_literal ::= STR_LITERAL | REGEX_LITERAL {
    implements = "com.intellij.psi.PsiLanguageInjectionHost"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpQuotedLiteralMixin"
}

path ::= PATH_REF | path_id

path_id ::= ID {
    implements = "com.mdrobnak.lalrpop.psi.LpResolveType"
    mixin = "com.mdrobnak.lalrpop.psi.ext.LpPathIdMixin"
}
