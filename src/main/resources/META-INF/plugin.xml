<idea-plugin>
    <id>com.mdrobnak.intellij-lalrpop</id>
    <name>LALRPOP</name>
    <vendor>Mark Drobnak</vendor>

    <description><![CDATA[
        Adds support for the <a href="https://github.com/lalrpop/lalrpop">LALRPOP</a> parser-generator.
    ]]></description>

    <!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.lang</depends>
    <depends>com.jetbrains.rust</depends>

    <extensions defaultExtensionNs="com.intellij">
        <fileType
                name="LALRPOP"
                language="LALRPOP"
                extensions="lalrpop"
                implementationClass="com.mdrobnak.lalrpop.LpFileType"
                fieldName="INSTANCE"/>

        <lang.parserDefinition
                language="LALRPOP"
                implementationClass="com.mdrobnak.lalrpop.LpParserDefinition"/>

        <lang.syntaxHighlighter
                language="LALRPOP"
                implementationClass="com.mdrobnak.lalrpop.LpSyntaxHighlighter"/>

        <annotator language="LALRPOP" implementationClass="com.mdrobnak.lalrpop.annotator.LpHighlightingAnnotator"/>

        <multiHostInjector implementation="com.mdrobnak.lalrpop.injectors.LpRegexInjector"/>
        <multiHostInjector implementation="com.mdrobnak.lalrpop.injectors.LpRustActionCodeInjector"/>
        <multiHostInjector implementation="com.mdrobnak.lalrpop.injectors.LpRustImportCodeInjector"/>
        <multiHostInjector implementation="com.mdrobnak.lalrpop.injectors.LpRustTypeRefInjector"/>

        <lang.findUsagesProvider
                language="LALRPOP"
                implementationClass="com.mdrobnak.lalrpop.resolve.LpFindUsagesProvider"/>

        <lang.refactoringSupport language="LALRPOP"
                                 implementationClass="com.mdrobnak.lalrpop.LpRefactoringSupportProvider"/>

        <lang.braceMatcher language="LALRPOP" implementationClass="com.mdrobnak.lalrpop.LpBraceMatcher"/>
        <lang.commenter language="LALRPOP" implementationClass="com.mdrobnak.lalrpop.LpCommenter"/>
        <lang.quoteHandler language="LALRPOP" implementationClass="com.mdrobnak.lalrpop.LpQuoteHandler"/>
        <lang.foldingBuilder language="LALRPOP" implementationClass="com.mdrobnak.lalrpop.LpFoldingBuilder"/>

        <codeInsight.inlayProvider language="LALRPOP" implementationClass="com.mdrobnak.lalrpop.codeInsight.LpExpressionTypeInlayHintProvider"/>

        <localInspection language="LALRPOP" id="MissingTerminals" groupName="LALRPOP" displayName="Missing terminals"
                         implementationClass="com.mdrobnak.lalrpop.inspections.MissingTerminalsInspection"
                         enabledByDefault="true"
                         level="ERROR"/>
        <localInspection language="LALRPOP" id="NamedSymbols" groupName="LALRPOP"
                         displayName="Named selected symbols"
                         implementationClass="com.mdrobnak.lalrpop.inspections.NamedSymbolsInspection"
                         enabledByDefault="true"
                         level="ERROR"/>
        <localInspection language="LALRPOP" id="CannotInferNonterminalType" groupName="LALRPOP"
                         displayName="Cannot infer nonterminal type"
                         implementationClass="com.mdrobnak.lalrpop.inspections.CannotInferNonterminalTypeInspection"
                         enabledByDefault="true"
                         level="ERROR"/>
        <localInspection language="LALRPOP" id="CannotResolveNonterminalReference" groupName="LALRPOP"
                         displayName="Cannot resolve nonterminal reference"
                         implementationClass="com.mdrobnak.lalrpop.inspections.CannotResolveNonterminalReferenceInspection"
                         enabledByDefault="true"
                         level="ERROR"/>

        <localInspection language="LALRPOP" id="WrongInferredType" groupName="LALRPOP"
                         displayName="Inferred type does not correspond to explicit type declared on nonterminal"
                         implementationClass="com.mdrobnak.lalrpop.inspections.WrongInferredTypeInspection"
                         enabledByDefault="true"
                         level="ERROR"/>

        <localInspection language="LALRPOP" id="Unused" groupName="LALRPOP"
                         displayName="Unused nonterminal"
                         implementationClass="com.mdrobnak.lalrpop.inspections.UnusedInspection"
                         enabledByDefault="true"
                         level="WARNING"/>

        <localInspection language="LALRPOP" id="Precedence" groupName="LALRPOP"
                         displayName="Precedence validation"
                         implementationClass="com.mdrobnak.lalrpop.inspections.PrecedenceInspection"
                         enabledByDefault="true"
                         level="ERROR"/>

        <localInspection language="LALRPOP" id="RedundantAction" groupName="LALRPOP"
                         displayName="Redundant action"
                         implementationClass="com.mdrobnak.lalrpop.inspections.RedundantActionInspection"
                         enabledByDefault="true"
                         level="WARNING"/>

        <intentionAction>
            <className>com.mdrobnak.lalrpop.intentions.AddExplicitTypeIntention</className>
            <category>LALRPOP</category>
        </intentionAction>

        <errorHandler implementation="com.mdrobnak.lalrpop.LpErrorReporter"/>
    </extensions>

    <change-notes><![CDATA[
        <b>0.2.15</b><br>
        * Update dependencies<br>
        * Fix "NoSuchMethodError" on 2024.2+ due to recent Rust plugin release (reported via Sentry)<br>
        <br>

        <b>0.2.14</b><br>
        * Switch support from open source Rust plugin to new Jetbrains Rust plugin<br>
        * Dropped support for 2023.1 (support is available for 2023.2+)<br>
        * Note: There's a known false-positive error reported on &lt;&gt; in Rust action code<br>
        <br>

        <b>0.2.13</b><br>
        * Update dependencies<br>
        * Support recent intellij-rust changes<br>
        * Update to support 2023.1 IDEs (and drop 2022 IDEs)<br>
        <br>

        <b>0.2.12</b><br>
        * Update dependencies<br>
        * Support recent intellij-rust changes<br>
        * Fix Rust code injection (references in LALRPOP files work again!)<br>
        <br>

        <b>0.2.11</b><br>
        * Fix "Failed to create use statement" bug (reported via Sentry)<br>
        <br>

        <b>0.2.10</b><br>
        * Update to support 2022.1 IDEs (and drop 2021.3)<br>
        * Update dependencies<br>
        <br>

        <b>0.2.9</b><br>
        * Fix an error when using the plugin with IntelliJ-Rust >= 165 (reported via Sentry)<br>
        * Fix an error in InferFromRustPluginQuickFix when the type isn't known<br>
        * More accurately match the supported RegExp functionality in LALRPOP<br>
        * Fix a possible issue with non-unique keys in MissingTerminalsInspection (reported via Sentry)<br>
        * Drop support for < 2021.3 IDEs<br>
        <br>

        <b>0.2.8</b><br>
        * Fix an exception due to using non-unique text attribute keys (reported via Sentry)<br>
        * Fix an exception due to lexer emitting empty CODE tokens (reported via Sentry)<br>
        * Fix stack overflow when inferring type of self-referential nonterminal (reported via Sentry)<br>
        * Improve parser recovery when alternative fails to parse<br>
        * Fix possible lexer exception when Rust code block is empty<br>
        * Update dependencies<br>
        <br>

        <b>0.2.7</b><br>
        * Add error reporter for plugin crashes<br>
        * Support 2021.3 IDEs/EAP<br>
        * Possible fix for duplicate use/semicolon tokens after renaming item used in import<br>
        * Small improvements to the lexer<br>
        <br>

        <b>0.2.6</b><br>
        * Fix multi-line Rust string handling<br>
        <br>

        <b>0.2.5</b><br>
        * Fix some cases of parentheses/brackets/braces in Rust strings breaking the lexer<br>
        * Remove a deprecated function usage<br>
        <br>

        <b>0.2.4</b><br>
        * Improve parentheses counting in Rust code blocks to handle strings (fixes #45)<br>
        * Add support for 2021.2 IDEs<br>
        * Drop support for 2020 IDEs<br>
        * (internal) Update dependencies and Gradle<br>
        <br>

        <b>0.2.3</b><br>
        * (internal) Simplify the expansion of `<>` (@dblanovschi)<br>
        * (internal) Update dependencies and Gradle<br>
        * Fix finding the parser module declaration (this caused many weird issues)<br>
        <br>

        <b>0.2.2</b><br>
        * Remove trailing newlines from user code<br>
        * Give color to commas<br>
        * Fix exception when refactoring affects injected Rust type references<br>
        * Fix refactoring in Rust code adding a duplicate action type in affected LALRPOP code<br>
        * Support 2021.1 EAP<br>
        <br>

        <b>0.2.1</b><br>
        * Inject Rust into type references (e.g. explicit nonterminal types)<br>
        * Handle fallible user actions (@dblanovschi)<br>
        * Add an intention to explicitly write the inferred the type of a nonterminal (@dblanovschi)<br>
        * Add an inspection for redundant user action code, such as <code>=> &lt;&gt;</code> (@dblanovschi)<br>
        * Support in-place renaming (@dblanovschi)<br>
        * Add type hints to nonterminals and (optionally) symbols (@dblanovschi)<br>
        <br>

        <b>0.2.0</b><br>
        * Handle <> expressions in action code (@dblanovschi)<br>
        * Infer nonterminal types and perform type resolution (@dblanovschi)<br>
        * Fix "Unable to save plugin settings" error (@dblanovschi)<br>
        * Add a bunch of inspections (@dblanovschi)<br>
        <br>

        <b>0.1.1</b><br>
        * Add missing terminals inspection (@dblanovschi)<br>
        * Add grammar params to injected action code (@dblanovschi)<br>
        * Add some code highlighting (ex. nonterminals) (@dblanovschi)<br>
        <br>

        <b>0.1.0</b><br>
        Initial release of the LALRPOP plugin
    ]]></change-notes>
</idea-plugin>